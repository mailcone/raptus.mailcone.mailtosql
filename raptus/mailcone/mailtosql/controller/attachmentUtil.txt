# -*- coding: utf-8 -*-

import moduls, which are needed for tests
	>>> from config import CONFIG
	>>> from controller.attachmentUtil import AttachmentUtil
	>>> from data.attachment import Attachment
	>>> import datetime
	>>> import shutil
	>>> import os

XXX: hack, to find testMail2 file, perhaps could be done better
::	
	>>> import sys
	>>> path = sys.argv [0].replace ('test_mail_to_sql.py', '')
	
set CONFIG parameters which are set in default.cfg
::
	>>> from mail_to_sql import parseConfig
	>>> parseConfig (path + 'default.cfg')

Initialize an attachment util.
::
	>>> attachmentUtil = AttachmentUtil (CONFIG)
	>>> attachmentUtil
	<controller.attachmentUtil.AttachmentUtil object at ...>
	
test functions _hasPath and _createPath
If not exist, create rootPath an then check for it
::
	>>> attachmentUtil._createPath (attachmentUtil.rootPath)
	>>> os.path.isdir (attachmentUtil.rootPath)
	True

test function _getFullhour
::
	>>> receiveDate = datetime.date (2003, 07, 20)
	>>> receiveTime = datetime.time (18, 45)
	>>> attachmentTest = Attachment ('test.txt', receiveDate, receiveTime, 'This is the data')
	>>> attachmentTest.mailId = 5
	>>> attachmentUtil._getFullhour (attachmentTest)
	>>> attachmentTest.strFullhour
	'1800'
	
test function _joinPath
compose of storage path
::
	>>> receiveDate = datetime.date (2006, 11, 10)
	>>> receiveTime = datetime.time (13, 35)
	>>> attachment1 = Attachment ('test.txt', receiveDate, receiveTime, 'This is the data')
	>>> attachment1.mailId = 1
	>>> attachmentUtil._joinPath (attachment1)
	>>> attachment1.filepath
	'.../2006-11-10/1300/1'

test function _createPath with an attachment
create a path structure with conventions of mail-to-sql
::
	>>> attachmentUtil._createPath (attachment1.filepath)

remove test path
::
	>>> testPath = os.path.join (attachmentUtil.rootPath, '2006-11-10')
	>>> shutil.rmtree (testPath)
	
test function saveFile (attachment)
::
	>>> receiveDate = datetime.date (2006, 11, 10)
	>>> receiveTime = datetime.time (13, 35)
	>>> attachment2 = Attachment ('test.txt', receiveDate, receiveTime, 'This is the data')
	>>> attachment1.mailId = '1'
	>>> attachmentUtil.saveFile (attachment2)
	True

TESTS IF EVERY FUNCTION RAISE AN ERROR IF SOMETHING BREAK
NEEDED BECAUSE OTHERWISE PIPEDATA WOULD NOT BE SAVED - LOST DATA

test function _getFullhour - raise error
::
	>>> receiveDate = '2003'
	>>> receiveTime = '20'
	>>> attachmentTest = Attachment ('test.txt', receiveDate, receiveTime, 'This is the data')
	>>> attachmentTest.mailId = 5
	>>> attachmentUtil._getFullhour (attachmentTest)
	Traceback (most recent call last):
	    ...
	RuntimeError: AttachmentUtil - _getFullhour() - FAILED - 'str' object has no attribute 'strftime'

test function _joinPath - raise error
::
	>>> attachmentUtil._joinPath ('test fake attachment')
	Traceback (most recent call last):
	    ...
	RuntimeError: AttachmentUtil - _joinPath() - FAILED - 'str' object has no attribute 'receiveDate'

test function _createPath - raise error
::
	>>> attachmentUtil._createPath (1)
	Traceback (most recent call last):
	    ...
	RuntimeError: AttachmentUtil - _createPath() - FAILED - coercing to Unicode: need string or buffer, int found

test function saveFile - raise error
::
	>>> attachmentUtil.saveFile ('fake attachmment')
	Traceback (most recent call last):
	    ...
	RuntimeError: AttachmentUtil - saveFile() - FAILED - AttachmentUtil - _joinPath() - FAILED - 'str' object has no attribute 'receiveDate'